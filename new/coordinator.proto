syntax = "proto3";
package csce438;

service CoordService {
    rpc GetSlave (ID) returns (ServerInfo);
    rpc Heartbeat (ServerInfo) returns (Confirmation);   // Heartbeat from server to coordinator
    rpc GetServer (ID) returns (ServerInfo);              // Get server info for a client

    rpc GetAllFollowerServers (ID) returns (ServerList) {}
    rpc GetFollowerServer (ID) returns (ServerInfo) {}
}

message ServerInfo {
    uint64 cluster_id = 1;
    uint64 server_id = 2;   // Server identifier
    string server_ip = 3;   // Server IP address
    string server_port = 4; // Server port
    string type = 5;
    bool is_master = 6;
}

message Confirmation {
    bool success = 1;       // Indicates if the operation was successful
    string message = 2;     // Additional information
}

message Status {
    bool exists = 1;        // Indicates if the path exists or not
    string message = 2;     // Any additional message or error info
}

message PathAndData {
    string path = 1;        // Path to the znode
    string data = 2;        // Data to be stored in the znode
}

message Path {
    string path = 1;        // Path to check
}

message ID {
    uint64 client_id = 1;   // Client ID
}

//two repeated string lists of each entry in a users 
//Timeline (TL) and Follower List (FL)
// TLFL definition
message TLFL{
    bool status = 1;
    repeated string TL = 2; 
    repeated string FL = 3; 
}


//list of all users known of by given follower synchronizer
// AllUsers definition
message AllUsers{
    repeated string users = 1; 
}

message SynchronizerListReply {
  repeated string all_users = 1;
  repeated string followers = 2;
}

// ServerList definition
message ServerList{
    repeated int32 serverID = 1;
    repeated string hostname = 2;
    repeated string port = 3;
    repeated string type = 4;
}

//TODO:
//potentially add a wake up synchronization rpc to be made from
//coordinator when it detects a server reconnects after being off
// SynchService definition
service SynchService{
    rpc GetAllUsers(Confirmation) returns (AllUsers) {}
    rpc GetFollowersOfClient(ID) returns (AllUsers) {}
    rpc GetTLFL(ID) returns (TLFL) {}
    rpc ResynchServer(ServerInfo) returns (Confirmation) {}
    rpc SynchronizerList(ID) returns (SynchronizerListReply) {}
}