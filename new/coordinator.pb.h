// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: coordinator.proto
// Protobuf C++ Version: 5.29.0

#ifndef coordinator_2eproto_2epb_2eh
#define coordinator_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_coordinator_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_coordinator_2eproto;
namespace csce438 {
class AllUsers;
struct AllUsersDefaultTypeInternal;
extern AllUsersDefaultTypeInternal _AllUsers_default_instance_;
class Confirmation;
struct ConfirmationDefaultTypeInternal;
extern ConfirmationDefaultTypeInternal _Confirmation_default_instance_;
class ID;
struct IDDefaultTypeInternal;
extern IDDefaultTypeInternal _ID_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathAndData;
struct PathAndDataDefaultTypeInternal;
extern PathAndDataDefaultTypeInternal _PathAndData_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerList;
struct ServerListDefaultTypeInternal;
extern ServerListDefaultTypeInternal _ServerList_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class SynchronizerListReply;
struct SynchronizerListReplyDefaultTypeInternal;
extern SynchronizerListReplyDefaultTypeInternal _SynchronizerListReply_default_instance_;
class TLFL;
struct TLFLDefaultTypeInternal;
extern TLFLDefaultTypeInternal _TLFL_default_instance_;
}  // namespace csce438
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace csce438 {

// ===================================================================


// -------------------------------------------------------------------

class TLFL final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.TLFL) */ {
 public:
  inline TLFL() : TLFL(nullptr) {}
  ~TLFL() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TLFL* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TLFL));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TLFL(
      ::google::protobuf::internal::ConstantInitialized);

  inline TLFL(const TLFL& from) : TLFL(nullptr, from) {}
  inline TLFL(TLFL&& from) noexcept
      : TLFL(nullptr, std::move(from)) {}
  inline TLFL& operator=(const TLFL& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLFL& operator=(TLFL&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLFL& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLFL* internal_default_instance() {
    return reinterpret_cast<const TLFL*>(
        &_TLFL_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TLFL& a, TLFL& b) { a.Swap(&b); }
  inline void Swap(TLFL* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLFL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLFL* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TLFL>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TLFL& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TLFL& from) { TLFL::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TLFL* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.TLFL"; }

 protected:
  explicit TLFL(::google::protobuf::Arena* arena);
  TLFL(::google::protobuf::Arena* arena, const TLFL& from);
  TLFL(::google::protobuf::Arena* arena, TLFL&& from) noexcept
      : TLFL(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTLFieldNumber = 2,
    kFLFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated string TL = 2;
  int tl_size() const;
  private:
  int _internal_tl_size() const;

  public:
  void clear_tl() ;
  const std::string& tl(int index) const;
  std::string* mutable_tl(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tl(int index, Arg_&& value, Args_... args);
  std::string* add_tl();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_tl(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& tl() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tl();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tl() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tl();

  public:
  // repeated string FL = 3;
  int fl_size() const;
  private:
  int _internal_fl_size() const;

  public:
  void clear_fl() ;
  const std::string& fl(int index) const;
  std::string* mutable_fl(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fl(int index, Arg_&& value, Args_... args);
  std::string* add_fl();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_fl(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& fl() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_fl();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_fl() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_fl();

  public:
  // bool status = 1;
  void clear_status() ;
  bool status() const;
  void set_status(bool value);

  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.TLFL)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      25, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TLFL& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> tl_;
    ::google::protobuf::RepeatedPtrField<std::string> fl_;
    bool status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class SynchronizerListReply final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.SynchronizerListReply) */ {
 public:
  inline SynchronizerListReply() : SynchronizerListReply(nullptr) {}
  ~SynchronizerListReply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SynchronizerListReply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SynchronizerListReply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SynchronizerListReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline SynchronizerListReply(const SynchronizerListReply& from) : SynchronizerListReply(nullptr, from) {}
  inline SynchronizerListReply(SynchronizerListReply&& from) noexcept
      : SynchronizerListReply(nullptr, std::move(from)) {}
  inline SynchronizerListReply& operator=(const SynchronizerListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizerListReply& operator=(SynchronizerListReply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynchronizerListReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynchronizerListReply* internal_default_instance() {
    return reinterpret_cast<const SynchronizerListReply*>(
        &_SynchronizerListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SynchronizerListReply& a, SynchronizerListReply& b) { a.Swap(&b); }
  inline void Swap(SynchronizerListReply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizerListReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynchronizerListReply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SynchronizerListReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SynchronizerListReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SynchronizerListReply& from) { SynchronizerListReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SynchronizerListReply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.SynchronizerListReply"; }

 protected:
  explicit SynchronizerListReply(::google::protobuf::Arena* arena);
  SynchronizerListReply(::google::protobuf::Arena* arena, const SynchronizerListReply& from);
  SynchronizerListReply(::google::protobuf::Arena* arena, SynchronizerListReply&& from) noexcept
      : SynchronizerListReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllUsersFieldNumber = 1,
    kFollowersFieldNumber = 2,
  };
  // repeated string all_users = 1;
  int all_users_size() const;
  private:
  int _internal_all_users_size() const;

  public:
  void clear_all_users() ;
  const std::string& all_users(int index) const;
  std::string* mutable_all_users(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_all_users(int index, Arg_&& value, Args_... args);
  std::string* add_all_users();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_all_users(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& all_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_all_users();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_all_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_all_users();

  public:
  // repeated string followers = 2;
  int followers_size() const;
  private:
  int _internal_followers_size() const;

  public:
  void clear_followers() ;
  const std::string& followers(int index) const;
  std::string* mutable_followers(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_followers(int index, Arg_&& value, Args_... args);
  std::string* add_followers();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_followers(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& followers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_followers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_followers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_followers();

  public:
  // @@protoc_insertion_point(class_scope:csce438.SynchronizerListReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SynchronizerListReply& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> all_users_;
    ::google::protobuf::RepeatedPtrField<std::string> followers_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class Status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Status(
      ::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from) : Status(nullptr, from) {}
  inline Status(Status&& from) noexcept
      : Status(nullptr, std::move(from)) {}
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
        &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Status& a, Status& b) { a.Swap(&b); }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Status& from) { Status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.Status"; }

 protected:
  explicit Status(::google::protobuf::Arena* arena);
  Status(::google::protobuf::Arena* arena, const Status& from);
  Status(::google::protobuf::Arena* arena, Status&& from) noexcept
      : Status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kExistsFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool exists = 1;
  void clear_exists() ;
  bool exists() const;
  void set_exists(bool value);

  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.Status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Status& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool exists_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ServerList final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.ServerList) */ {
 public:
  inline ServerList() : ServerList(nullptr) {}
  ~ServerList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerList(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerList(const ServerList& from) : ServerList(nullptr, from) {}
  inline ServerList(ServerList&& from) noexcept
      : ServerList(nullptr, std::move(from)) {}
  inline ServerList& operator=(const ServerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerList& operator=(ServerList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerList* internal_default_instance() {
    return reinterpret_cast<const ServerList*>(
        &_ServerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ServerList& a, ServerList& b) { a.Swap(&b); }
  inline void Swap(ServerList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerList& from) { ServerList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.ServerList"; }

 protected:
  explicit ServerList(::google::protobuf::Arena* arena);
  ServerList(::google::protobuf::Arena* arena, const ServerList& from);
  ServerList(::google::protobuf::Arena* arena, ServerList&& from) noexcept
      : ServerList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIDFieldNumber = 1,
    kHostnameFieldNumber = 2,
    kPortFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated int32 serverID = 1;
  int serverid_size() const;
  private:
  int _internal_serverid_size() const;

  public:
  void clear_serverid() ;
  ::int32_t serverid(int index) const;
  void set_serverid(int index, ::int32_t value);
  void add_serverid(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& serverid() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_serverid();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_serverid() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_serverid();

  public:
  // repeated string hostname = 2;
  int hostname_size() const;
  private:
  int _internal_hostname_size() const;

  public:
  void clear_hostname() ;
  const std::string& hostname(int index) const;
  std::string* mutable_hostname(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostname(int index, Arg_&& value, Args_... args);
  std::string* add_hostname();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_hostname(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& hostname() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_hostname();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_hostname() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_hostname();

  public:
  // repeated string port = 3;
  int port_size() const;
  private:
  int _internal_port_size() const;

  public:
  void clear_port() ;
  const std::string& port(int index) const;
  std::string* mutable_port(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(int index, Arg_&& value, Args_... args);
  std::string* add_port();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_port(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& port() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_port();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_port() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_port();

  public:
  // repeated string type = 4;
  int type_size() const;
  private:
  int _internal_type_size() const;

  public:
  void clear_type() ;
  const std::string& type(int index) const;
  std::string* mutable_type(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(int index, Arg_&& value, Args_... args);
  std::string* add_type();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_type(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& type() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_type();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_type() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_type();

  public:
  // @@protoc_insertion_point(class_scope:csce438.ServerList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerList& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> serverid_;
    ::google::protobuf::internal::CachedSize _serverid_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> hostname_;
    ::google::protobuf::RepeatedPtrField<std::string> port_;
    ::google::protobuf::RepeatedPtrField<std::string> type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerInfo(const ServerInfo& from) : ServerInfo(nullptr, from) {}
  inline ServerInfo(ServerInfo&& from) noexcept
      : ServerInfo(nullptr, std::move(from)) {}
  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
        &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ServerInfo& a, ServerInfo& b) { a.Swap(&b); }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerInfo& from) { ServerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.ServerInfo"; }

 protected:
  explicit ServerInfo(::google::protobuf::Arena* arena);
  ServerInfo(::google::protobuf::Arena* arena, const ServerInfo& from);
  ServerInfo(::google::protobuf::Arena* arena, ServerInfo&& from) noexcept
      : ServerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIpFieldNumber = 3,
    kServerPortFieldNumber = 4,
    kTypeFieldNumber = 5,
    kClusterIdFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kIsMasterFieldNumber = 6,
  };
  // string server_ip = 3;
  void clear_server_ip() ;
  const std::string& server_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_ip(Arg_&& arg, Args_... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* value);

  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(
      const std::string& value);
  std::string* _internal_mutable_server_ip();

  public:
  // string server_port = 4;
  void clear_server_port() ;
  const std::string& server_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_port(Arg_&& arg, Args_... args);
  std::string* mutable_server_port();
  PROTOBUF_NODISCARD std::string* release_server_port();
  void set_allocated_server_port(std::string* value);

  private:
  const std::string& _internal_server_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_port(
      const std::string& value);
  std::string* _internal_mutable_server_port();

  public:
  // string type = 5;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // uint64 cluster_id = 1;
  void clear_cluster_id() ;
  ::uint64_t cluster_id() const;
  void set_cluster_id(::uint64_t value);

  private:
  ::uint64_t _internal_cluster_id() const;
  void _internal_set_cluster_id(::uint64_t value);

  public:
  // uint64 server_id = 2;
  void clear_server_id() ;
  ::uint64_t server_id() const;
  void set_server_id(::uint64_t value);

  private:
  ::uint64_t _internal_server_id() const;
  void _internal_set_server_id(::uint64_t value);

  public:
  // bool is_master = 6;
  void clear_is_master() ;
  bool is_master() const;
  void set_is_master(bool value);

  private:
  bool _internal_is_master() const;
  void _internal_set_is_master(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.ServerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr server_ip_;
    ::google::protobuf::internal::ArenaStringPtr server_port_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::uint64_t cluster_id_;
    ::uint64_t server_id_;
    bool is_master_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class PathAndData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.PathAndData) */ {
 public:
  inline PathAndData() : PathAndData(nullptr) {}
  ~PathAndData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PathAndData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PathAndData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PathAndData(
      ::google::protobuf::internal::ConstantInitialized);

  inline PathAndData(const PathAndData& from) : PathAndData(nullptr, from) {}
  inline PathAndData(PathAndData&& from) noexcept
      : PathAndData(nullptr, std::move(from)) {}
  inline PathAndData& operator=(const PathAndData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathAndData& operator=(PathAndData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathAndData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathAndData* internal_default_instance() {
    return reinterpret_cast<const PathAndData*>(
        &_PathAndData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PathAndData& a, PathAndData& b) { a.Swap(&b); }
  inline void Swap(PathAndData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathAndData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathAndData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PathAndData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PathAndData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PathAndData& from) { PathAndData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PathAndData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.PathAndData"; }

 protected:
  explicit PathAndData(::google::protobuf::Arena* arena);
  PathAndData(::google::protobuf::Arena* arena, const PathAndData& from);
  PathAndData(::google::protobuf::Arena* arena, PathAndData&& from) noexcept
      : PathAndData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:csce438.PathAndData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PathAndData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class Path final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Path* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Path));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Path(
      ::google::protobuf::internal::ConstantInitialized);

  inline Path(const Path& from) : Path(nullptr, from) {}
  inline Path(Path&& from) noexcept
      : Path(nullptr, std::move(from)) {}
  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
        &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Path& a, Path& b) { a.Swap(&b); }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Path>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Path& from) { Path::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Path* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.Path"; }

 protected:
  explicit Path(::google::protobuf::Arena* arena);
  Path(::google::protobuf::Arena* arena, const Path& from);
  Path(::google::protobuf::Arena* arena, Path&& from) noexcept
      : Path(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:csce438.Path)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      25, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Path& from_msg);
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ID final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.ID) */ {
 public:
  inline ID() : ID(nullptr) {}
  ~ID() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ID* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ID));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ID(
      ::google::protobuf::internal::ConstantInitialized);

  inline ID(const ID& from) : ID(nullptr, from) {}
  inline ID(ID&& from) noexcept
      : ID(nullptr, std::move(from)) {}
  inline ID& operator=(const ID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ID& operator=(ID&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ID& default_instance() {
    return *internal_default_instance();
  }
  static inline const ID* internal_default_instance() {
    return reinterpret_cast<const ID*>(
        &_ID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ID& a, ID& b) { a.Swap(&b); }
  inline void Swap(ID* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ID* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ID& from) { ID::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ID* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.ID"; }

 protected:
  explicit ID(::google::protobuf::Arena* arena);
  ID(::google::protobuf::Arena* arena, const ID& from);
  ID(::google::protobuf::Arena* arena, ID&& from) noexcept
      : ID(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
  };
  // uint64 client_id = 1;
  void clear_client_id() ;
  ::uint64_t client_id() const;
  void set_client_id(::uint64_t value);

  private:
  ::uint64_t _internal_client_id() const;
  void _internal_set_client_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.ID)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ID& from_msg);
    ::uint64_t client_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class Confirmation final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.Confirmation) */ {
 public:
  inline Confirmation() : Confirmation(nullptr) {}
  ~Confirmation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Confirmation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Confirmation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Confirmation(
      ::google::protobuf::internal::ConstantInitialized);

  inline Confirmation(const Confirmation& from) : Confirmation(nullptr, from) {}
  inline Confirmation(Confirmation&& from) noexcept
      : Confirmation(nullptr, std::move(from)) {}
  inline Confirmation& operator=(const Confirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Confirmation& operator=(Confirmation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Confirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Confirmation* internal_default_instance() {
    return reinterpret_cast<const Confirmation*>(
        &_Confirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Confirmation& a, Confirmation& b) { a.Swap(&b); }
  inline void Swap(Confirmation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Confirmation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Confirmation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Confirmation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Confirmation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Confirmation& from) { Confirmation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Confirmation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.Confirmation"; }

 protected:
  explicit Confirmation(::google::protobuf::Arena* arena);
  Confirmation(::google::protobuf::Arena* arena, const Confirmation& from);
  Confirmation(::google::protobuf::Arena* arena, Confirmation&& from) noexcept
      : Confirmation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.Confirmation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Confirmation& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class AllUsers final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csce438.AllUsers) */ {
 public:
  inline AllUsers() : AllUsers(nullptr) {}
  ~AllUsers() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AllUsers* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AllUsers));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllUsers(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllUsers(const AllUsers& from) : AllUsers(nullptr, from) {}
  inline AllUsers(AllUsers&& from) noexcept
      : AllUsers(nullptr, std::move(from)) {}
  inline AllUsers& operator=(const AllUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllUsers& operator=(AllUsers&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllUsers& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllUsers* internal_default_instance() {
    return reinterpret_cast<const AllUsers*>(
        &_AllUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(AllUsers& a, AllUsers& b) { a.Swap(&b); }
  inline void Swap(AllUsers* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllUsers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllUsers* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AllUsers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllUsers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllUsers& from) { AllUsers::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AllUsers* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csce438.AllUsers"; }

 protected:
  explicit AllUsers(::google::protobuf::Arena* arena);
  AllUsers(::google::protobuf::Arena* arena, const AllUsers& from);
  AllUsers(::google::protobuf::Arena* arena, AllUsers&& from) noexcept
      : AllUsers(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated string users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;

  public:
  void clear_users() ;
  const std::string& users(int index) const;
  std::string* mutable_users(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_users(int index, Arg_&& value, Args_... args);
  std::string* add_users();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_users(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_users();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_users();

  public:
  // @@protoc_insertion_point(class_scope:csce438.AllUsers)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      30, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AllUsers& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> users_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServerInfo

// uint64 cluster_id = 1;
inline void ServerInfo::clear_cluster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_ = ::uint64_t{0u};
}
inline ::uint64_t ServerInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:csce438.ServerInfo.cluster_id)
  return _internal_cluster_id();
}
inline void ServerInfo::set_cluster_id(::uint64_t value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:csce438.ServerInfo.cluster_id)
}
inline ::uint64_t ServerInfo::_internal_cluster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cluster_id_;
}
inline void ServerInfo::_internal_set_cluster_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cluster_id_ = value;
}

// uint64 server_id = 2;
inline void ServerInfo::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = ::uint64_t{0u};
}
inline ::uint64_t ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:csce438.ServerInfo.server_id)
  return _internal_server_id();
}
inline void ServerInfo::set_server_id(::uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:csce438.ServerInfo.server_id)
}
inline ::uint64_t ServerInfo::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_;
}
inline void ServerInfo::_internal_set_server_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_ = value;
}

// string server_ip = 3;
inline void ServerInfo::clear_server_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.ClearToEmpty();
}
inline const std::string& ServerInfo::server_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.ServerInfo.server_ip)
  return _internal_server_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_server_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.ServerInfo.server_ip)
}
inline std::string* ServerInfo::mutable_server_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:csce438.ServerInfo.server_ip)
  return _s;
}
inline const std::string& ServerInfo::_internal_server_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_ip_.Get();
}
inline void ServerInfo::_internal_set_server_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_server_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_ip_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_server_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.ServerInfo.server_ip)
  return _impl_.server_ip_.Release();
}
inline void ServerInfo::set_allocated_server_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_ip_.IsDefault()) {
    _impl_.server_ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.ServerInfo.server_ip)
}

// string server_port = 4;
inline void ServerInfo::clear_server_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_port_.ClearToEmpty();
}
inline const std::string& ServerInfo::server_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.ServerInfo.server_port)
  return _internal_server_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_server_port(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_port_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.ServerInfo.server_port)
}
inline std::string* ServerInfo::mutable_server_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_port();
  // @@protoc_insertion_point(field_mutable:csce438.ServerInfo.server_port)
  return _s;
}
inline const std::string& ServerInfo::_internal_server_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_port_.Get();
}
inline void ServerInfo::_internal_set_server_port(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_port_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_server_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_port_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_server_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.ServerInfo.server_port)
  return _impl_.server_port_.Release();
}
inline void ServerInfo::set_allocated_server_port(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_port_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_port_.IsDefault()) {
    _impl_.server_port_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.ServerInfo.server_port)
}

// string type = 5;
inline void ServerInfo::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ServerInfo::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.ServerInfo.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.ServerInfo.type)
}
inline std::string* ServerInfo::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:csce438.ServerInfo.type)
  return _s;
}
inline const std::string& ServerInfo::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void ServerInfo::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.ServerInfo.type)
  return _impl_.type_.Release();
}
inline void ServerInfo::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.ServerInfo.type)
}

// bool is_master = 6;
inline void ServerInfo::clear_is_master() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_master_ = false;
}
inline bool ServerInfo::is_master() const {
  // @@protoc_insertion_point(field_get:csce438.ServerInfo.is_master)
  return _internal_is_master();
}
inline void ServerInfo::set_is_master(bool value) {
  _internal_set_is_master(value);
  // @@protoc_insertion_point(field_set:csce438.ServerInfo.is_master)
}
inline bool ServerInfo::_internal_is_master() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_master_;
}
inline void ServerInfo::_internal_set_is_master(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_master_ = value;
}

// -------------------------------------------------------------------

// Confirmation

// bool success = 1;
inline void Confirmation::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool Confirmation::success() const {
  // @@protoc_insertion_point(field_get:csce438.Confirmation.success)
  return _internal_success();
}
inline void Confirmation::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csce438.Confirmation.success)
}
inline bool Confirmation::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void Confirmation::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void Confirmation::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Confirmation::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.Confirmation.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Confirmation::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.Confirmation.message)
}
inline std::string* Confirmation::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csce438.Confirmation.message)
  return _s;
}
inline const std::string& Confirmation::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void Confirmation::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Confirmation::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Confirmation::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.Confirmation.message)
  return _impl_.message_.Release();
}
inline void Confirmation::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.Confirmation.message)
}

// -------------------------------------------------------------------

// Status

// bool exists = 1;
inline void Status::clear_exists() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exists_ = false;
}
inline bool Status::exists() const {
  // @@protoc_insertion_point(field_get:csce438.Status.exists)
  return _internal_exists();
}
inline void Status::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:csce438.Status.exists)
}
inline bool Status::_internal_exists() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exists_;
}
inline void Status::_internal_set_exists(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exists_ = value;
}

// string message = 2;
inline void Status::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Status::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.Status.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.Status.message)
}
inline std::string* Status::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csce438.Status.message)
  return _s;
}
inline const std::string& Status::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Status::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.Status.message)
  return _impl_.message_.Release();
}
inline void Status::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.Status.message)
}

// -------------------------------------------------------------------

// PathAndData

// string path = 1;
inline void PathAndData::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& PathAndData::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.PathAndData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PathAndData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.PathAndData.path)
}
inline std::string* PathAndData::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:csce438.PathAndData.path)
  return _s;
}
inline const std::string& PathAndData::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void PathAndData::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* PathAndData::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* PathAndData::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.PathAndData.path)
  return _impl_.path_.Release();
}
inline void PathAndData::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.PathAndData.path)
}

// string data = 2;
inline void PathAndData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PathAndData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.PathAndData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PathAndData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.PathAndData.data)
}
inline std::string* PathAndData::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:csce438.PathAndData.data)
  return _s;
}
inline const std::string& PathAndData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void PathAndData::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* PathAndData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* PathAndData::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.PathAndData.data)
  return _impl_.data_.Release();
}
inline void PathAndData::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.PathAndData.data)
}

// -------------------------------------------------------------------

// Path

// string path = 1;
inline void Path::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Path::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.Path.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Path::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csce438.Path.path)
}
inline std::string* Path::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:csce438.Path.path)
  return _s;
}
inline const std::string& Path::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void Path::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* Path::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* Path::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csce438.Path.path)
  return _impl_.path_.Release();
}
inline void Path::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csce438.Path.path)
}

// -------------------------------------------------------------------

// ID

// uint64 client_id = 1;
inline void ID::clear_client_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_ = ::uint64_t{0u};
}
inline ::uint64_t ID::client_id() const {
  // @@protoc_insertion_point(field_get:csce438.ID.client_id)
  return _internal_client_id();
}
inline void ID::set_client_id(::uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:csce438.ID.client_id)
}
inline ::uint64_t ID::_internal_client_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_id_;
}
inline void ID::_internal_set_client_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_id_ = value;
}

// -------------------------------------------------------------------

// TLFL

// bool status = 1;
inline void TLFL::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = false;
}
inline bool TLFL::status() const {
  // @@protoc_insertion_point(field_get:csce438.TLFL.status)
  return _internal_status();
}
inline void TLFL::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:csce438.TLFL.status)
}
inline bool TLFL::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_;
}
inline void TLFL::_internal_set_status(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// repeated string TL = 2;
inline int TLFL::_internal_tl_size() const {
  return _internal_tl().size();
}
inline int TLFL::tl_size() const {
  return _internal_tl_size();
}
inline void TLFL::clear_tl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tl_.Clear();
}
inline std::string* TLFL::add_tl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_tl()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.TLFL.TL)
  return _s;
}
inline const std::string& TLFL::tl(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.TLFL.TL)
  return _internal_tl().Get(index);
}
inline std::string* TLFL::mutable_tl(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.TLFL.TL)
  return _internal_mutable_tl()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TLFL::set_tl(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_tl()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.TLFL.TL)
}
template <typename Arg_, typename... Args_>
inline void TLFL::add_tl(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tl(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.TLFL.TL)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TLFL::tl() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.TLFL.TL)
  return _internal_tl();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TLFL::mutable_tl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.TLFL.TL)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tl();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TLFL::_internal_tl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tl_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TLFL::_internal_mutable_tl() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tl_;
}

// repeated string FL = 3;
inline int TLFL::_internal_fl_size() const {
  return _internal_fl().size();
}
inline int TLFL::fl_size() const {
  return _internal_fl_size();
}
inline void TLFL::clear_fl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fl_.Clear();
}
inline std::string* TLFL::add_fl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_fl()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.TLFL.FL)
  return _s;
}
inline const std::string& TLFL::fl(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.TLFL.FL)
  return _internal_fl().Get(index);
}
inline std::string* TLFL::mutable_fl(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.TLFL.FL)
  return _internal_mutable_fl()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void TLFL::set_fl(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_fl()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.TLFL.FL)
}
template <typename Arg_, typename... Args_>
inline void TLFL::add_fl(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_fl(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.TLFL.FL)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TLFL::fl() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.TLFL.FL)
  return _internal_fl();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TLFL::mutable_fl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.TLFL.FL)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fl();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TLFL::_internal_fl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fl_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TLFL::_internal_mutable_fl() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fl_;
}

// -------------------------------------------------------------------

// AllUsers

// repeated string users = 1;
inline int AllUsers::_internal_users_size() const {
  return _internal_users().size();
}
inline int AllUsers::users_size() const {
  return _internal_users_size();
}
inline void AllUsers::clear_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.users_.Clear();
}
inline std::string* AllUsers::add_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_users()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.AllUsers.users)
  return _s;
}
inline const std::string& AllUsers::users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.AllUsers.users)
  return _internal_users().Get(index);
}
inline std::string* AllUsers::mutable_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.AllUsers.users)
  return _internal_mutable_users()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AllUsers::set_users(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_users()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.AllUsers.users)
}
template <typename Arg_, typename... Args_>
inline void AllUsers::add_users(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_users(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.AllUsers.users)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AllUsers::users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.AllUsers.users)
  return _internal_users();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AllUsers::mutable_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.AllUsers.users)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_users();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AllUsers::_internal_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.users_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AllUsers::_internal_mutable_users() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.users_;
}

// -------------------------------------------------------------------

// SynchronizerListReply

// repeated string all_users = 1;
inline int SynchronizerListReply::_internal_all_users_size() const {
  return _internal_all_users().size();
}
inline int SynchronizerListReply::all_users_size() const {
  return _internal_all_users_size();
}
inline void SynchronizerListReply::clear_all_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.all_users_.Clear();
}
inline std::string* SynchronizerListReply::add_all_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_all_users()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.SynchronizerListReply.all_users)
  return _s;
}
inline const std::string& SynchronizerListReply::all_users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.SynchronizerListReply.all_users)
  return _internal_all_users().Get(index);
}
inline std::string* SynchronizerListReply::mutable_all_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.SynchronizerListReply.all_users)
  return _internal_mutable_all_users()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SynchronizerListReply::set_all_users(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_all_users()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.SynchronizerListReply.all_users)
}
template <typename Arg_, typename... Args_>
inline void SynchronizerListReply::add_all_users(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_all_users(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.SynchronizerListReply.all_users)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SynchronizerListReply::all_users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.SynchronizerListReply.all_users)
  return _internal_all_users();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SynchronizerListReply::mutable_all_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.SynchronizerListReply.all_users)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_all_users();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SynchronizerListReply::_internal_all_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.all_users_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SynchronizerListReply::_internal_mutable_all_users() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.all_users_;
}

// repeated string followers = 2;
inline int SynchronizerListReply::_internal_followers_size() const {
  return _internal_followers().size();
}
inline int SynchronizerListReply::followers_size() const {
  return _internal_followers_size();
}
inline void SynchronizerListReply::clear_followers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.followers_.Clear();
}
inline std::string* SynchronizerListReply::add_followers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_followers()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.SynchronizerListReply.followers)
  return _s;
}
inline const std::string& SynchronizerListReply::followers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.SynchronizerListReply.followers)
  return _internal_followers().Get(index);
}
inline std::string* SynchronizerListReply::mutable_followers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.SynchronizerListReply.followers)
  return _internal_mutable_followers()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SynchronizerListReply::set_followers(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_followers()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.SynchronizerListReply.followers)
}
template <typename Arg_, typename... Args_>
inline void SynchronizerListReply::add_followers(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_followers(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.SynchronizerListReply.followers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SynchronizerListReply::followers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.SynchronizerListReply.followers)
  return _internal_followers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SynchronizerListReply::mutable_followers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.SynchronizerListReply.followers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_followers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SynchronizerListReply::_internal_followers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.followers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SynchronizerListReply::_internal_mutable_followers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.followers_;
}

// -------------------------------------------------------------------

// ServerList

// repeated int32 serverID = 1;
inline int ServerList::_internal_serverid_size() const {
  return _internal_serverid().size();
}
inline int ServerList::serverid_size() const {
  return _internal_serverid_size();
}
inline void ServerList::clear_serverid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.serverid_.Clear();
}
inline ::int32_t ServerList::serverid(int index) const {
  // @@protoc_insertion_point(field_get:csce438.ServerList.serverID)
  return _internal_serverid().Get(index);
}
inline void ServerList::set_serverid(int index, ::int32_t value) {
  _internal_mutable_serverid()->Set(index, value);
  // @@protoc_insertion_point(field_set:csce438.ServerList.serverID)
}
inline void ServerList::add_serverid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_serverid()->Add(value);
  // @@protoc_insertion_point(field_add:csce438.ServerList.serverID)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ServerList::serverid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.ServerList.serverID)
  return _internal_serverid();
}
inline ::google::protobuf::RepeatedField<::int32_t>* ServerList::mutable_serverid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.ServerList.serverID)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_serverid();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
ServerList::_internal_serverid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.serverid_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* ServerList::_internal_mutable_serverid() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.serverid_;
}

// repeated string hostname = 2;
inline int ServerList::_internal_hostname_size() const {
  return _internal_hostname().size();
}
inline int ServerList::hostname_size() const {
  return _internal_hostname_size();
}
inline void ServerList::clear_hostname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hostname_.Clear();
}
inline std::string* ServerList::add_hostname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_hostname()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.ServerList.hostname)
  return _s;
}
inline const std::string& ServerList::hostname(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.ServerList.hostname)
  return _internal_hostname().Get(index);
}
inline std::string* ServerList::mutable_hostname(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.ServerList.hostname)
  return _internal_mutable_hostname()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ServerList::set_hostname(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_hostname()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.ServerList.hostname)
}
template <typename Arg_, typename... Args_>
inline void ServerList::add_hostname(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_hostname(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.ServerList.hostname)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerList::hostname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.ServerList.hostname)
  return _internal_hostname();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerList::mutable_hostname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.ServerList.hostname)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hostname();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerList::_internal_hostname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hostname_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerList::_internal_mutable_hostname() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hostname_;
}

// repeated string port = 3;
inline int ServerList::_internal_port_size() const {
  return _internal_port().size();
}
inline int ServerList::port_size() const {
  return _internal_port_size();
}
inline void ServerList::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_.Clear();
}
inline std::string* ServerList::add_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_port()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.ServerList.port)
  return _s;
}
inline const std::string& ServerList::port(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.ServerList.port)
  return _internal_port().Get(index);
}
inline std::string* ServerList::mutable_port(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.ServerList.port)
  return _internal_mutable_port()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ServerList::set_port(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_port()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.ServerList.port)
}
template <typename Arg_, typename... Args_>
inline void ServerList::add_port(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_port(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.ServerList.port)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerList::port() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.ServerList.port)
  return _internal_port();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerList::mutable_port() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.ServerList.port)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_port();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerList::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerList::_internal_mutable_port() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.port_;
}

// repeated string type = 4;
inline int ServerList::_internal_type_size() const {
  return _internal_type().size();
}
inline int ServerList::type_size() const {
  return _internal_type_size();
}
inline void ServerList::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Clear();
}
inline std::string* ServerList::add_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_type()->Add();
  // @@protoc_insertion_point(field_add_mutable:csce438.ServerList.type)
  return _s;
}
inline const std::string& ServerList::type(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csce438.ServerList.type)
  return _internal_type().Get(index);
}
inline std::string* ServerList::mutable_type(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csce438.ServerList.type)
  return _internal_mutable_type()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ServerList::set_type(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_type()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csce438.ServerList.type)
}
template <typename Arg_, typename... Args_>
inline void ServerList::add_type(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_type(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csce438.ServerList.type)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerList::type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csce438.ServerList.type)
  return _internal_type();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerList::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csce438.ServerList.type)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_type();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerList::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerList::_internal_mutable_type() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.type_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace csce438


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // coordinator_2eproto_2epb_2eh
